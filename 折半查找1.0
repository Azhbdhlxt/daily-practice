#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <graphics.h>
#include <time.h>
#define N 40 
int ReadScore(int score[], long num[]);
int BinSearch(long num[], long x, int n);

int main(int argc, char* argv[])
{
   int score[N], n, pos;
   
   long num[N], x;
   
   n = ReadScore(score, num);
   
   printf("总共学生有%d 人\n", n);
   
   printf("输入搜索的ID");
   
   scanf("%ld", &x);
   //以长整型格式从键盘输入待查找的学号x 
   
   pos = BinSearch(num, x, n);
   //查找学号为num的学生 
   
   if(pos != -1)
   {
   	printf("分数 = %d\n", score[pos]);
   	
   }
   
   else
   {
   	printf("没找到");
   	
   }

  return 0;
  
}
int ReadScore(int score[], long num[])
{
	int i = - 1;
	
	do{
		i ++;
		
		printf("输入学生ID和分数：");
		
		scanf("%ld%ld", &num[i], &score[i]);
		
	}while(num[i] > 0 && score[i] >= 0);
	
	return i;
	
}
int BinSearch(long num[], long x, int n)
//折半查找值为x的数组元素找到返回数组下标位置，否则返回-1 
{
	int low = 0, high = n - 1, mid;
	//区间左端点low置0，右high置为n-1 
	int pos = -1;
	//置找到标志变量flag为假 
	int find = 0;

	while(!find && low <= high)
	//若未找到且左小于右，继续查找 
	{
		mid = low + (high - low) / 2;
		//替换mid=(high+low)/2
		//当数组长度非常长至 low与high和超出limits.h定义的有符号整型极限值，会发生溢出致使mid为负数 
		//取数据区间中点 
		
		if(x > num[mid])
		
		{
			
		  low = mid + 1;
		  //修改区间左端点 
		  
		}
		
		else if (x < num[mid])
		{
			high = mid - 1;
			//修改区间右端点 
			
		}
		
		else
		
		{
			pos = mid;
			//若找到置下标值mid 
			find = 1;
			//置找到标志变量flag为真 
		}
		
		
	}
	
	return pos;
	//循环结束，没找到返回0	
	 
	
}
